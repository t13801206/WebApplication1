{"version":3,"sources":["MyApp.js","serviceWorker.js","index.js"],"names":["todos","id","title","isDone","TodoHeader","props","remaining","filter","todo","onClick","purge","length","TodoItem","type","checked","onChange","checkTodo","className","deleteTodo","TodoList","map","key","TodoForm","onSubmit","addTodo","value","item","updateItem","MyApp","state","bind","this","setState","pos","indexOf","slice","splice","e","target","preventDefault","trim","Date","getTime","toString","Math","random","push","localStorage","setItem","JSON","stringify","parse","getItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.605d1e18.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MyApp.css';\r\n\r\n\r\nconst todos = [\r\n    { id: 0, title: 'Task 0', isDone: false },\r\n    { id: 1, title: 'Task 1', isDone: false },\r\n    { id: 2, title: 'Task 2', isDone: true }\r\n];\r\n\r\nfunction TodoHeader(props) {\r\n    const remaining = props.todos.filter(todo => {\r\n        return !todo.isDone;\r\n    });\r\n    return (\r\n        <h1>\r\n            <button onClick={props.purge}>Purge</button>\r\n            My todos\r\n            <span>({remaining.length}/{props.todos.length})</span>\r\n\r\n        </h1>\r\n    );\r\n}\r\n\r\n\r\nfunction TodoItem(props) {\r\n    return (\r\n        <li>\r\n            <label>\r\n                <input type=\"checkbox\"\r\n                    checked={props.todo.isDone}\r\n                    onChange={() => props.checkTodo(props.todo)}\r\n                />\r\n                <span className={props.todo.isDone ? 'done' : ''}>\r\n                    {props.todo.title}\r\n                </span>\r\n            </label>\r\n\r\n            <span\r\n                className=\"cmd\"\r\n                onClick={() => props.deleteTodo(props.todo)}>\r\n                [x]\r\n            </span>\r\n        </li>\r\n    );\r\n}\r\n\r\n// ステートを保持しないならば function を使う\r\nfunction TodoList(props) {\r\n    const todos = props.todos.map(todo => {\r\n        return (\r\n            // <li key={todo.id}>{todo.title}</li>\r\n            <TodoItem\r\n                key={todo.id}\r\n                todo={todo}\r\n                checkTodo={props.checkTodo}\r\n                deleteTodo={props.deleteTodo}\r\n            />\r\n        );\r\n    });\r\n    return (\r\n        <ul>\r\n            {props.todos.length ? todos : <li>Nothig</li>}\r\n        </ul>\r\n    );\r\n}\r\n\r\nfunction TodoForm(props) {\r\n    // テキストボックスの文字列はAppのステートなので、直接は変更できない\r\n    return (\r\n        <form onSubmit={props.addTodo}>\r\n            <input type=\"text\" value={props.item} onChange={props.updateItem} />\r\n            <input type=\"submit\" value=\"ADD\" />\r\n        </form>\r\n    );\r\n\r\n}\r\n\r\nfunction getUniqueId() {\r\n    return new Date().getTime().toString(36) + '-' + Math.random().toString(36);\r\n}\r\n\r\n// このクラスにのみステータスを持たせる（親から子へ伝播）\r\nclass MyApp extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            todos: todos,\r\n            item: ''\r\n        };\r\n        this.checkTodo = this.checkTodo.bind(this);\r\n        this.deleteTodo = this.deleteTodo.bind(this);\r\n        this.updateItem = this.updateItem.bind(this);\r\n        this.addTodo = this.addTodo.bind(this);\r\n        this.purge = this.purge.bind(this);\r\n    }\r\n\r\n    purge() {\r\n        // const todos = this.state.todos.filter(todo=>{\r\n        //   return !todo.isDone\r\n        const todos = this.state.todos.filter(todo => !todo.isDone);\r\n        this.setState({\r\n            todos: todos\r\n        });\r\n    }\r\n\r\n    checkTodo(todo) {\r\n        const todos = this.state.todos.map(todo => {\r\n            return { id: todo.id, title: todo.title, isDone: todo.isDone };\r\n        });\r\n        // 引数todoのidがどこのポジションであるか\r\n        const pos = this.state.todos.map(todo => {\r\n            return todo.id;\r\n        }).indexOf(todo.id);\r\n        todos[pos].isDone = !todos[pos].isDone;\r\n        this.setState({\r\n            todos: todos\r\n        });\r\n    }\r\n\r\n    deleteTodo(todo) {\r\n\r\n        // ステートを変更しない場合は、sliceでよい\r\n        const todos = this.state.todos.slice();\r\n        const pos = this.state.todos.indexOf(todo);\r\n\r\n        todos.splice(pos, 1);\r\n        this.setState({\r\n            todos: todos\r\n        });\r\n    }\r\n\r\n    updateItem(e) {\r\n        this.setState({\r\n            item: e.target.value\r\n        });\r\n    }\r\n\r\n    addTodo(e) {\r\n        // 画面遷移回避\r\n        e.preventDefault();\r\n\r\n        if (this.state.item.trim() === '') {\r\n            return;\r\n        }\r\n\r\n        const item = {\r\n            id: getUniqueId(),\r\n            title: this.state.item,\r\n            isDone: false\r\n        };\r\n\r\n        // 直接ステートに新規アイテムをプッシュできないので、いったん sliceコピーを作成\r\n        const todos = this.state.todos.slice();\r\n        todos.push(item);\r\n        this.setState({\r\n            todos: todos,\r\n            item: ''\r\n        });\r\n    }\r\n\r\n    // 定義済みライフサイクルメソッド\r\n    componentDidUpdate() {\r\n        localStorage.setItem('todos', JSON.stringify(this.state.todos));\r\n    }\r\n\r\n    // 定義済みライフサイクルメソッド\r\n    componentDidMount() {\r\n        this.setState({\r\n            todos: JSON.parse(localStorage.getItem('todos')) || []\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <TodoHeader\r\n                    todos={this.state.todos}\r\n                    purge={this.purge}\r\n\r\n                />\r\n                <TodoList\r\n                    todos={this.state.todos}\r\n                    checkTodo={this.checkTodo}\r\n                    deleteTodo={this.deleteTodo}\r\n                />\r\n                <TodoForm\r\n                    item={this.state.item}\r\n                    updateItem={this.updateItem}\r\n                    addTodo={this.addTodo}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default MyApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MyApp from './MyApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MyApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}